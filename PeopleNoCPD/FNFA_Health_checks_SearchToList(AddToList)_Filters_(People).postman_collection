{
	"info": {
		"_postman_id": "655e3c60-0afa-4614-92db-52dc4c565107",
		"name": "NFA - Health checks SearchToList(AddToList ) Filters (People)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test 2",
			"item": [
				{
					"name": "actionSearch(AddToExistingList)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d9d3e9ea-756f-4648-bc45-05db52929a8d",
								"exec": [
									"// console.log(\"***** Search To List - Pre-request Script. START *****\");",
									"",
									"",
									"",
									"// var EXPSearchFilters = pm.environment.get(\"EXPSearchFilters\");",
									"",
									"// if (!EXPSearchFilters) {",
									"//   EXPSearchFilters = [\"{ all{isIn(person.currentCompany.state, 'Alabama'); isIn(person.currentCompany.industry, 'Performing Arts')}}\"];",
									"// }",
									"",
									"// if(EXPSearchFilters.length > 0){",
									"//     var EXPSearchCurrentFilter = EXPSearchFilters.shift();",
									"",
									"//     pm.environment.set('EXPSearchFilter', EXPSearchCurrentFilter);",
									"//     pm.environment.set('EXPSearchFilters', EXPSearchFilters);",
									"// // pm.environment.set('List', listForSearch)",
									"//     console.log(\"EXPSearchFilters\", pm.environment.get('EXPSearchFilters'));",
									"",
									"//     console.log(\"***** Search To List - Pre-request Script. END *****\");",
									"// }",
									"// else",
									"// {",
									"//     console.log(\"Search list is empty\");",
									"//     return false;",
									"//     // postman.setNextRequest(null);",
									"    ",
									"// }",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "692f43dc-8870-4077-8fcb-716b44f69902",
								"exec": [
									"console.log(\"***** Search To List - Test. START *****\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"JSON Checking for structure\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    var EXPSearchFilter = pm.environment.get(\"EXPSearchFilter\");",
									"    console.log(\"Current filter value: \", EXPSearchFilter);",
									"    ",
									"    // EXPSearchFilter && EXPSearchFilter.length > 0",
									"        let searchJobID = jsonData.jobId;",
									"        pm.environment.set(\"SearchJobID\", searchJobID);",
									"        ",
									"        let SearchJobID= pm.environment.get(\"SearchJobID\");",
									"        console.log(\"Search jobID\", SearchJobID);",
									"        ",
									"        postman.setNextRequest(\"ResourcesJobs\");",
									"   ",
									"       ",
									"   ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman."
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"listId\":\"{{AddToListPeopleNoCPD}}\",\n    \"filter\": \"{ all{isIn(person.currentCompany.state, 'Alabama'); isIn(person.currentCompany.industry, 'Performing Arts')}}\"\n}\n"
						},
						"url": {
							"raw": "{{API_URL}}/batch/search/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"batch",
								"search",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ResourcesJobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da7cb6f2-e6c8-4db3-8a0a-0a91b9a57491",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Checking for structure\", function () {\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    var recognizeJobID = pm.environment.get(\"RecognizeJOBID\");\r",
									"    console.log(\"Get Jobs(Tests) - getRecognizeJobID\", recognizeJobID);\r",
									"\r",
									"    var modelJobID = pm.environment.get(\"ModelJobID\");\r",
									"    console.log(\"Get Jobs(Tests) - getModelJobID\", modelJobID);\r",
									"\r",
									"    var predictJobID = pm.environment.get(\"PredictJobID\");\r",
									"    console.log(\"Get Jobs(Tests) - getPredictJobID\", predictJobID);\r",
									"\r",
									"    var recommendJobID = pm.environment.get(\"RecommendJobID\");\r",
									"    console.log(\"Get Jobs(Tests) - getRecommendJobID\", recommendJobID);\r",
									"    \r",
									"    var searchJobID = pm.environment.get(\"SearchJobID\");\r",
									"    console.log(\"getSearchJobID\", searchJobID);\r",
									"    \r",
									"    if(recognizeJobID)\r",
									"    {\r",
									"        console.log(\"Sleeping for 60 seconds before next request.\");\r",
									"        setTimeout(function(){}, 60000);\r",
									"        \r",
									"        let jobStatus = jsonData.results.jobs[0].status;\r",
									"        pm.expect(jobStatus).to.eql(\"complete\");\r",
									"        \r",
									"        let jobCategory = jsonData.results.jobs[0].category;\r",
									"        pm.expect(jobCategory).to.eql(\"recognize\");\r",
									"        \r",
									"        let jobTargetListID = jsonData.results.jobs[0].targetListId;\r",
									"        pm.expect(jobTargetListID).to.not.be.null;\r",
									"        pm.environment.set(\"RecognizeTargetList\", jobTargetListID);\r",
									"        console.log( \"Get Jobs - RecognizeTargetList:\", pm.environment.get(\"RecognizeTargetList\"));\r",
									"       \r",
									"        let jobEntityCount = jsonData.results.jobs[0].entityCount;\r",
									"        pm.expect(jobEntityCount).to.be.above(0);\r",
									"        //current entityCount for AddToListPeopleNoCPD=6e27d7d6-b441-495c-a0f4-7e4e6b76f13b is '201'\r",
									"        // pm.expect(jobEntityCount, \"not expected list's 'entityCount'\").to.be.eql(201); \r",
									"       \r",
									"        let jobDetailsAvailable = jsonData.results.jobs[0].detailsAvailable;\r",
									"        pm.expect(jobDetailsAvailable).to.not.be.null;\r",
									"        \r",
									"        pm.expect(jobDetailsAvailable[0]).to.eql(\"sourceData\");\r",
									"        pm.expect(jobDetailsAvailable[1]).to.eql(\"recognizedData\");\r",
									"        \r",
									"        pm.environment.unset(\"RecognizeJOBID\");\r",
									"        \r",
									"        // postman.setNextRequest(\"actionCreateModel\");\r",
									"    }\r",
									"    else if(modelJobID)\r",
									"    {\r",
									"        console.log(\"Sleeping for 60 seconds before next request.\");\r",
									"        setTimeout(function(){}, 60000);\r",
									"        \r",
									"        let jobStatus = jsonData.results.jobs[0].status;\r",
									"        pm.expect(jobStatus).to.eql(\"complete\");\r",
									"        \r",
									"        let jobCategory = jsonData.results.jobs[0].category;\r",
									"        pm.expect(jobCategory).to.eql(\"createModel\");\r",
									"        \r",
									"        let modelID = jsonData.results.jobs[0].modelId;\r",
									"        pm.expect(modelID).to.not.be.null;\r",
									"        pm.environment.set(\"ModelID\", modelID);\r",
									"        \r",
									"        let jobEntityCount = jsonData.results.jobs[0].entityCount;\r",
									"        pm.expect(jobEntityCount).to.be.above(0);\r",
									"        \r",
									"        // let savedModelID = pm.environment.get(\"ModelID\");\r",
									"        // console.log(\"Get Jobs - modelID\", savedModelID);\r",
									"        \r",
									"        console.log(\"Get Jobs - modelID\", pm.environment.get(\"ModelID\"));\r",
									"        \r",
									"        pm.environment.unset(\"ModelJobID\");\r",
									"        \r",
									"        postman.setNextRequest(null);\r",
									"    }\r",
									"    else if(predictJobID)\r",
									"    {\r",
									"        let jobStatus = jsonData.results.jobs[0].status;\r",
									"        pm.expect(jobStatus).to.eql(\"complete\");\r",
									"        \r",
									"        let jobCategory = jsonData.results.jobs[0].category;\r",
									"        pm.expect(jobCategory).to.eql(\"predict\");\r",
									"           \r",
									"        let jobTargetListID = jsonData.results.jobs[0].targetListId;\r",
									"        pm.expect(jobTargetListID).to.not.be.null;\r",
									"        pm.environment.set(\"PredictTargetList\", jobTargetListID);\r",
									"        \r",
									"        let jobModelID = jsonData.results.jobs[0].modelId;\r",
									"        pm.expect(jobModelID).to.not.be.null;\r",
									"        pm.environment.set(\"ModelID\", jobModelID);\r",
									"        \r",
									"        let jobEntityCount = jsonData.results.jobs[0].entityCount;\r",
									"        pm.expect(jobEntityCount).to.be.above(0);\r",
									"        \r",
									"        // let savedPredictTargetList = pm.environment.get(\"PredictTargetList\");\r",
									"        // console.log(\"getPredictTargetList\", savedPredictTargetList);\r",
									"        \r",
									"        console.log(\"Get Jobs - PredictTargetList\", pm.environment.get(\"PredictTargetList\"));\r",
									"        \r",
									"        pm.environment.unset(\"PredictJobID\");\r",
									"        \r",
									"        // postman.setNextRequest(\"actionCreateModel\");\r",
									"    \r",
									"    }\r",
									"    else if(recommendJobID)\r",
									"    {\r",
									"        console.log(\"Sleeping for 60 seconds before next request.\");\r",
									"        setTimeout(function(){}, 60000);\r",
									"        \r",
									"        let jobStatus = jsonData.results.jobs[0].status;\r",
									"        pm.expect(jobStatus).to.eql(\"complete\");\r",
									"        \r",
									"        let jobCategory = jsonData.results.jobs[0].category;\r",
									"        pm.expect(jobCategory).to.eql(\"recommend\");\r",
									"        \r",
									"        let jobTargetlistID = jsonData.results.jobs[0].targetListId;\r",
									"        pm.expect(jobTargetlistID).to.not.be.null;\r",
									"        pm.environment.set(\"RecommendTargetList\", jobTargetlistID);\r",
									"        \r",
									"        let jobEntityCount = jsonData.results.jobs[0].entityCount;\r",
									"        pm.expect(jobEntityCount).to.be.above(0);\r",
									"        \r",
									"        // let recommend = pm.environment.get(\"RecommendTargetList\");\r",
									"        console.log(\"Get Jobs - RecommendTargetList\", pm.environment.get(\"RecommendTargetList\"));\r",
									"        \r",
									"        // postman.setNextRequest(\"actionCreateModel\");\r",
									"    \r",
									"        pm.environment.unset(\"RecommendJobID\");\r",
									"    }\r",
									"    else if(searchJobID)\r",
									"    {\r",
									"        console.log(\"Sleeping for 60 seconds before next request.\");\r",
									"        setTimeout(function(){}, 60000);\r",
									"        \r",
									"        let jobStatus = jsonData.results.jobs[0].status;\r",
									"        pm.expect(jobStatus).to.eql(\"complete\");\r",
									"        \r",
									"        let jobCategory = jsonData.results.jobs[0].category;\r",
									"        pm.expect(jobCategory).to.eql(\"search\");\r",
									"        \r",
									"        let jobTargetlistID = jsonData.results.jobs[0].targetListId;\r",
									"        pm.expect(jobTargetlistID).to.not.be.null;\r",
									"        pm.environment.set(\"SearchTargetList\", jobTargetlistID);\r",
									"        console.log(\"Get Jobs - SearchTargetList\", pm.environment.get(\"SearchTargetList\"));\r",
									"        \r",
									"        // let jobEntityCount = jsonData.results.jobs[0].entityCount;\r",
									"        // pm.expect(jobEntityCount).to.be.above(0);\r",
									"        \r",
									"        pm.test(\"Check if entityCount > 0\", function () {\r",
									"            let jobEntityCount = jsonData.results.jobs[0].entityCount;\r",
									"            if(jobEntityCount > 0){\r",
									"                postman.setNextRequest(\"actionExport\");\r",
									"            }\r",
									"            else{\r",
									"                postman.setNextRequest(null);\r",
									"            }\r",
									"        });\r",
									"    \r",
									"        pm.environment.unset(\"SearchJobID\");\r",
									"    }\r",
									"    else{\r",
									"        postman.setNextRequest(null);\r",
									"    }\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d44e4780-448d-4da8-827a-faa0c3bb0f34",
								"exec": [
									"console.log(\"*****Get Jobs(pre-request script). START ***** \");\r",
									"\r",
									"let getJobsGeneralWait = 60000;\r",
									"let getJobsGeneralWaitMessage = \"Sleeping for 60 seconds before next request.\"; \r",
									"\r",
									"var recognizeJobID = pm.environment.get(\"RecognizeJOBID\");\r",
									"console.log(\"getRecognizeJobID\",recognizeJobID);\r",
									"\r",
									"var modelJobID = pm.environment.get(\"ModelJobID\");\r",
									"console.log(\"getModelJobID\",modelJobID);\r",
									"\r",
									"var predictJobID = pm.environment.get(\"PredictJobID\");\r",
									"console.log(\"getPredictJobID\", predictJobID);\r",
									"\r",
									"var recommendJobID = pm.environment.get(\"RecommendJobID\");\r",
									"console.log(\"getRecommendJobID\", recommendJobID);\r",
									"\r",
									"var searchJobID = pm.environment.get(\"SearchJobID\");\r",
									"console.log(\"getSearchJobID\", searchJobID);\r",
									"\r",
									"if(recognizeJobID) {\r",
									"    console.log(getJobsGeneralWaitMessage);\r",
									"    setTimeout(function(){}, getJobsGeneralWait);\r",
									"    pm.environment.set(\"id\",\"{{RecognizeJOBID}}\");\r",
									"  \r",
									"}else if(modelJobID)\r",
									"{\r",
									"    console.log(\"Sleeping for 420 seconds before next request.\" );\r",
									"    setTimeout(function(){}, 420000);\r",
									"    pm.environment.set(\"id\",\"{{ModelJobID}}\");\r",
									"}\r",
									"else if(predictJobID)\r",
									"{\r",
									"    console.log(getJobsGeneralWaitMessage);\r",
									"    setTimeout(function(){\r",
									"        //   console.log(\"Sleeping for 60 seconds before next request.\");\r",
									"    }, getJobsGeneralWait);\r",
									"    pm.environment.set(\"id\",\"{{PredictJobID}}\");\r",
									"}\r",
									"else if(recommendJobID)\r",
									"{\r",
									"    console.log(getJobsGeneralWaitMessage);\r",
									"    setTimeout(function(){}, getJobsGeneralWait);\r",
									"\r",
									"    pm.environment.set(\"id\",\"{{RecommendJobID}}\");\r",
									"}\r",
									"else if(searchJobID)\r",
									"{\r",
									"    console.log(getJobsGeneralWaitMessage);\r",
									"    setTimeout(function(){}, getJobsGeneralWait);\r",
									"\r",
									"    pm.environment.set(\"id\",\"{{SearchJobID}}\");\r",
									"}\r",
									"console.log(\"*****Get Jobs(pre-request script). END ***** \");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"url": {
							"raw": "{{API_URL}}/resources/jobs/?id={{id}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"resources",
								"jobs",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sourceListId",
									"value": "cd8a71c0-8e79-11e9-af64-4f46cb2b6517",
									"disabled": true
								},
								{
									"key": "targetListId",
									"value": "",
									"disabled": true
								},
								{
									"key": "modelId",
									"value": "",
									"disabled": true
								},
								{
									"key": "category",
									"value": "export",
									"disabled": true
								},
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "actionExport",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d9d3e9ea-756f-4648-bc45-05db52929a8d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "692f43dc-8870-4077-8fcb-716b44f69902",
								"exec": [
									"console.log(\"*****Action Export(pre-request script). START ***** \");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"JSON Checking for structure\", function () {",
									"    var jsonData = pm.response.json();",
									"   ",
									"    let exportJobID = jsonData.jobId;",
									"    pm.environment.set(\"SearchExportJobID\", exportJobID);",
									"    console.log(\"SearchExportJobID\", pm.environment.get(\"SearchExportJobID\"));",
									"    postman.setNextRequest(\"Download - Job: Exported Data\");",
									"",
									"});",
									"",
									"console.log(\"Export - Sleeping for 120 seconds before next request.\");",
									"setTimeout(function(){}, 120000);",
									"",
									"console.log(\"*****Action Export(pre-request script). END ***** \");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman."
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"listId\": \"{{SearchTargetList}}\",\n    \"pattern\": \"people\"\n}"
						},
						"url": {
							"raw": "{{API_URL}}/batch/export/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"batch",
								"export",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Download - Job: Exported Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d22be9ef-4e13-4a71-9a2d-8fdb03f2ae5d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"JSON Checking for structure\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    let responselist = jsonData.data;",
									"    ",
									"    if(responselist.length > 0){",
									"        let customerData = jsonData.data[0].data[0].type;",
									"        pm.environment.set(\"cusData\", customerData);",
									"        ",
									"        testCustomData = pm.variables.get(\"cusData\");",
									"        pm.test(\"Body matches string\", function () {",
									"            pm.expect(pm.response.text()).to.include(testCustomData);",
									"        });",
									"    }",
									"    else",
									"    {",
									"        console.log(\"[type check] 'data' array is empty. 'entityCount' is maybe '0'?\");",
									"    }",
									"    ",
									"});",
									"",
									"pm.test(\"JSON Checking for structure\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    let responselist = jsonData.data;",
									"    // let fieldsValidation = pm.expect(responselist.length).to.be.above(0);",
									"    ",
									"    if(responselist.length > 0){",
									"        let customerData = jsonData.data[0].data[0].nodeID;",
									"        pm.environment.set(\"cusData\", customerData);",
									"    ",
									"        testCustomData = pm.variables.get(\"cusData\");",
									"        pm.test(\"Body matches string\", function () {",
									"            pm.expect(pm.response.text()).to.include(testCustomData);",
									"        });",
									"    }",
									"    else",
									"    {",
									"        console.log(\"[nodeID check] 'data' array is empty. 'entityCount' is maybe '0'?\");",
									"    }",
									"    ",
									"});",
									"",
									"postman.setNextRequest(\"actionCreateModel\");",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "28afa749-68a5-4893-b16e-9764282c6341",
								"exec": [
									"console.log(\"*****Download Job(pre-request script). START ***** \");",
									"",
									"var searchExportJobID = pm.environment.get(\"SearchExportJobID\");",
									"console.log(\"Pre-Script Search job ID\", searchExportJobID);",
									"",
									"",
									"if(searchExportJobID)",
									"{",
									"     pm.environment.set(\"EXPJOBID\",\"{{SearchExportJobID}}\");",
									"}",
									"",
									"console.log(\"*****Action Export(pre-request script). END ***** \");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "image/png",
								"type": "text",
								"disabled": true
							},
							{
								"key": "cache-control",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "image/png",
								"type": "text",
								"disabled": true
							},
							{
								"key": "apirequestid",
								"value": "b990cdbc-445e-11e9-a1c9-d55cf6b66c2d",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{API_URL}}/resources/jobs/{{EXPJOBID}}/detail?value=exportedData",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"resources",
								"jobs",
								"{{EXPJOBID}}",
								"detail"
							],
							"query": [
								{
									"key": "value",
									"value": "exportedData"
								},
								{
									"key": "page",
									"value": "4",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "actionCreateModel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01660469-e52e-4256-b6ba-d7e8c422d527",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"JSON Checking for structure\", function () {",
									"   ",
									"    var recognizeTargetList = pm.environment.get(\"RecognizeTargetList\");",
									"    console.log(\"Create model(test) - recognizeTargetList\", recognizeTargetList);",
									"    ",
									"    var recommendTargetList = pm.environment.get(\"RecommendTargetList\");",
									"    console.log(\"Create model(test) - recommendTargetList\", recommendTargetList);",
									"    ",
									"    var predictTargetList = pm.environment.get(\"PredictTargetList\");",
									"    console.log(\"Create model(test) - predictTargetList\", predictTargetList);",
									"    ",
									"    var searchTargetListID = pm.environment.get(\"SearchTargetList\");",
									"    console.log(\"getSearchTargetListID\", searchTargetListID);",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    if(recognizeTargetList)",
									"    {",
									"        // var jsonData = pm.response.json();",
									"        let jobID = jsonData.jobId;",
									"        console.log(\"Create Model(Recognize target list) - jobID\", jobID);",
									"        pm.environment.set(\"ModelJobID\", jobID);",
									"        ",
									"        let exportRecognizeTargetListID = pm.environment.get(\"RecognizeTargetList\");",
									"        pm.environment.set(\"EXPRecognizeID\", exportRecognizeTargetListID);",
									"        console.log(\"Create Model - Exported recognize target list:\", pm.environment.get(\"EXPRecognizeID\"));    ",
									"            ",
									"        pm.environment.unset(\"RecognizeTargetList\");",
									"            ",
									"        postman.setNextRequest(\"ResourcesJobs\");",
									"    }",
									"    else if(recommendTargetList)",
									"    {",
									"        // var jsonData = pm.response.json();",
									"        let jobID = jsonData.jobId;",
									"        console.log(\"Create Model(Recommend target list) - jobID\", jobID);",
									"        pm.environment.set(\"ModelJobIDR\", jobID);",
									"        ",
									"        let exportRecommendID = pm.environment.get(\"RecommendTargetList\");",
									"        pm.environment.set(\"EXPRecommendID\", exportRecommendID);",
									"        console.log(\"Create Model - Exported recommend target list:\", pm.environment.get(\"EXPRecommendID\"));",
									"        ",
									"        pm.environment.unset(\"RecommendTargetList\");",
									"        ",
									"        postman.setNextRequest(\"actionexport\");",
									"        ",
									"    }",
									"    else if(predictTargetList)",
									"    {",
									"        // var jsonData = pm.response.json();",
									"        let jobID = jsonData.jobId;",
									"        console.log(\"Create Model(Predict target list) - jobID\", jobID);",
									"        pm.environment.set(\"ModelJobIDP\",jobID);",
									"        ",
									"        let exportpredictID = pm.environment.get(\"PredictTargetList\");",
									"        pm.environment.set(\"EXPPredictID\", exportpredictID);",
									"        console.log(\"Create Model - Exported predict target list:\", pm.environment.get(\"EXPPredictID\"));",
									"        ",
									"        pm.environment.unset(\"PredictTargetList\");",
									"        ",
									"        postman.setNextRequest(\"actionRecommend\");",
									"    }",
									"    else if(searchTargetListID)",
									"    {",
									"        // var jsonData = pm.response.json();",
									"        let jobID = jsonData.jobId;",
									"        console.log(\"Create Model(Search target list) - jobID\", jobID);",
									"        pm.environment.set(\"ModelJobIDP\",jobID);",
									"        ",
									"        let exportSearchID = pm.environment.get(\"SearchTargetList\");",
									"        pm.environment.set(\"EXPSearchID\", exportSearchID);",
									"        console.log(\"Create Model - Exported search target list:\", pm.environment.get(\"EXPSearchID\"));",
									"        ",
									"        pm.environment.unset(\"SearchTargetList\");",
									"        ",
									"        // postman.setNextRequest(\"actionSearch\");",
									"        postman.setNextRequest(\"ResourcesJobs\");",
									"    }",
									"    else{",
									"        postman.setNextRequest(null);",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf5e35a9-b7e4-4dbf-a38d-7220ae5c29de",
								"exec": [
									"console.log(\"***** Create Model - Pre-request Script. START *****\");",
									"",
									"var recognizeTargetListID = pm.environment.get(\"RecognizeTargetList\");",
									"console.log(\"getRecognizeTargetList\", recognizeTargetListID);",
									"",
									"var recommendTargetListID = pm.environment.get(\"RecommendTargetList\");",
									"console.log(\"getRecommendTargetList\", recommendTargetListID);",
									"",
									"var predictionTargetListID = pm.environment.get(\"PredictTargetList\");",
									"console.log(\"getPredictTargetList\", predictionTargetListID);",
									"",
									"var searchTargetListID = pm.environment.get(\"SearchTargetList\");",
									"console.log(\"getSearchTargetListID\", searchTargetListID);",
									"",
									"if(recognizeTargetListID)",
									"{",
									"    pm.environment.set(\"TargetList\",\"{{RecognizeTargetList}}\");",
									"    console.log(\"afterSetRecognizeTargetList\", pm.environment.get(\"RecognizeTargetList\"));",
									"}",
									"if(recommendTargetListID)",
									"{",
									"    pm.environment.set(\"TargetList\",\"{{RecommendTargetList}}\");",
									"}",
									"if(predictionTargetListID)",
									"{",
									"    pm.environment.set(\"TargetList\",\"{{PredictTargetList}}\");",
									"}",
									"if(searchTargetListID)",
									"{",
									"    pm.environment.set(\"TargetList\",\"{{SearchTargetList}}\");",
									"}",
									"",
									"console.log(\"***** Create Model - Pre-request Script. END *****\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman."
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{API_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Node-API_Automation-Create_Model-SearchToList-People-no_CPD-{{$timestamp}}-{{$randomInt}}\",\n    \"listId\": \"{{TargetList}}\",\n    \"pattern\": \"people\",\n    \"purpose\": \"new_customer\",\n    \"params\": {\n        \"targetPositiveAccuracy\":0.7,\n        \"targetNegativeAccuracy\":0.2\n\t}\n}"
						},
						"url": {
							"raw": "{{API_URL}}/batch/createmodel",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"batch",
								"createmodel"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0899a556-416f-47ee-a290-d00f808844a4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "00c8dd19-6abf-43c9-9e67-bdeeef6cde2c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}